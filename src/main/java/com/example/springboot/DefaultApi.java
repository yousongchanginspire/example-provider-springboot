/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.springboot;

import com.example.springboot.Product;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-06T11:31:51.855623200-05:00[America/New_York]")
@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    /**
     * GET /products : List all products
     * Returns all products
     *
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Product not found (status code 404)
     */
    @Operation(
        operationId = "getAllProducts",
        summary = "List all products",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Product.class))),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Product not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    ResponseEntity<List<Product>> getAllProducts(
        
    );


    /**
     * GET /product/{id} : Find product by ID
     * Returns a single product
     *
     * @param id ID of product to get (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Product not found (status code 404)
     */
    @Operation(
        operationId = "getProductByID",
        summary = "Find product by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Product.class))),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Product not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<Product> getProductByID(
        @Parameter(name = "id", description = "ID of product to get", required = true, schema = @Schema(description = "")) @PathVariable("id") String id
    );

}
